{
  "_args": [
    [
      {
        "raw": "npm-check-updates",
        "scope": null,
        "escapedName": "npm-check-updates",
        "name": "npm-check-updates",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Users\\Adil\\Documents\\GitHub\\NG-1\\ng with ui-bootstrap"
    ]
  ],
  "_from": "npm-check-updates@latest",
  "_id": "npm-check-updates@2.11.3",
  "_inCache": true,
  "_location": "/npm-check-updates",
  "_nodeVersion": "7.8.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/npm-check-updates-2.11.3.tgz_1496503781335_0.025234590750187635"
  },
  "_npmUser": {
    "name": "raine",
    "email": "raineorshine@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "npm-check-updates",
    "scope": null,
    "escapedName": "npm-check-updates",
    "name": "npm-check-updates",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/npm-check-updates/-/npm-check-updates-2.11.3.tgz",
  "_shasum": "5e0172857f89004340b1b9afc0e9acb3bc56d440",
  "_shrinkwrap": null,
  "_spec": "npm-check-updates",
  "_where": "C:\\Users\\Adil\\Documents\\GitHub\\NG-1\\ng with ui-bootstrap",
  "author": {
    "name": "Tomas Junnonen",
    "email": "tomas1@gmail.com"
  },
  "bin": {
    "npm-check-updates": "./bin/npm-check-updates",
    "ncu": "./bin/ncu"
  },
  "bugs": {
    "url": "https://github.com/tjunnone/npm-check-updates/issues"
  },
  "contributors": [
    {
      "name": "Raine Revere",
      "url": "https://github.com/raineorshine"
    }
  ],
  "dependencies": {
    "bluebird": "^3.4.3",
    "chalk": "^1.1.3",
    "cint": "^8.2.1",
    "cli-table": "^0.3.1",
    "commander": "^2.9.0",
    "fast-diff": "^1.0.1",
    "find-up": "1.1.2",
    "get-stdin": "^5.0.1",
    "json-parse-helpfulerror": "^1.0.3",
    "lodash": "^4.15.0",
    "node-alias": "^1.0.4",
    "npm": "^3.10.6",
    "npmi": "^2.0.1",
    "require-dir": "^0.3.2",
    "semver": "^5.3.0",
    "semver-utils": "^1.1.1",
    "snyk": "^1.25.1",
    "spawn-please": "^0.2.0",
    "update-notifier": "^1.0.2"
  },
  "description": "Find newer versions of dependencies than what your package.json or bower.json allows",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "chai-string": "^1.2.0",
    "chokidar-cli": "^1.2.0",
    "eslint": "^3.4.0",
    "mocha": "^3.0.2",
    "should": "^11.1.0",
    "tmp": "0.0.31"
  },
  "directories": {},
  "dist": {
    "shasum": "5e0172857f89004340b1b9afc0e9acb3bc56d440",
    "tarball": "https://registry.npmjs.org/npm-check-updates/-/npm-check-updates-2.11.3.tgz"
  },
  "dynamicDependencies": {
    "bower": "^1.6.5"
  },
  "engines": {
    "node": ">=0.12"
  },
  "files": [
    "bin",
    "lib"
  ],
  "gitHead": "ddbc4576f3f479a05d6e5eb117b2e079ca41bc3d",
  "homepage": "https://github.com/tjunnone/npm-check-updates",
  "keywords": [
    "npm",
    "bower",
    "check",
    "find",
    "discover",
    "updates",
    "upgrades",
    "dependencies",
    "package.json",
    "bower.json",
    "updater",
    "version",
    "management"
  ],
  "license": "Apache-2.0",
  "main": "./lib/npm-check-updates",
  "maintainers": [
    {
      "name": "tjunnone",
      "email": "tomas1@gmail.com"
    },
    {
      "name": "raine",
      "email": "raineorshine@gmail.com"
    }
  ],
  "name": "npm-check-updates",
  "optionalDependencies": {},
  "preferGlobal": true,
  "readme": "[![NPM version](https://badge.fury.io/js/npm-check-updates.svg)](http://badge.fury.io/js/npm-check-updates)\n[![Build Status](https://travis-ci.org/tjunnone/npm-check-updates.svg?branch=master)](https://travis-ci.org/tjunnone/npm-check-updates)\n\nnpm-check-updates is a command-line tool that allows you to upgrade your package.json or bower.json dependencies to the latest versions, regardless of existing version constraints.\n\nnpm-check-updates maintains your existing semantic versioning *policies*, i.e., it will upgrade your `\"express\": \"^4.11.2\"` dependency to `\"express\": \"^5.0.0\"` when express 5.0.0 is released.\n\n![npm-check-updates-screenshot](https://cloud.githubusercontent.com/assets/750276/8864534/0788a4d8-3171-11e5-9881-8f7dcf634d14.png)\n\n![Question](http://www.virginmobileusa.com/_img/2012/icon-questionmark-small.gif) Having issues? Check out [known issues](#known-issues) first. Then check the [issues page](https://github.com/tjunnone/npm-check-updates/issues).\n\nInstallation\n--------------\n\n```sh\nnpm install -g npm-check-updates\n```\n\nUsage\n--------------\nShow any new dependencies for the project in the current directory:\n\n```sh\n$ ncu\n\n express           4.12.x  →   4.13.x\n multer            ^0.1.8  →   ^1.0.1\n react-bootstrap  ^0.22.6  →  ^0.24.0\n react-a11y        ^0.1.1  →   ^0.2.6\n webpack          ~1.9.10  →  ~1.10.5\n\nRun with -u to upgrade your package.json\n```\n\nUpgrade a project's package file:\n\n> **Make sure your package file is in version control and all changes have been committed. This *will* overwrite your package file.**\n\n```sh\n$ ncu -u\n\n express           4.12.x  →   4.13.x\n\npackage.json upgraded\n```\n\nWorks with bower:\n```sh\n$ ncu -m bower     # will use bower.json and check versions in bower\n```\n\nYou can include or exclude specific packages using the `--filter` and `--reject` options. They accept strings, comma-delimited lists, or regular expressions:\n\n```sh\n# match mocha and should packages exactly\n$ ncu mocha             # shorthand for ncu -f mocha (or --filter)\n$ ncu one, two, three\n\n# exclude packages\n$ ncu -x nodemon        # shorthand for ncu --reject nodemon\n\n# match packages that start with \"gulp-\" using regex\n$ ncu '/^gulp-.*$/'\n\n# match packages that do not start with \"gulp-\". Note: single quotes are required\n# here to avoid inadvertent bash parsing\n$ ncu '/^(?!gulp-).*$/'\n```\n\nOptions\n--------------\n    -d, --dev                check only devDependencies\n    -f, --filter             include only package names matching the given string, \n                             comma-delimited list, or regex\n    -g, --global             check global packages instead of in the current project\n    -h, --help               output usage information\n    -m, --packageManager     npm or bower (default: npm)\n    -p, --prod               check only dependencies (not devDependencies)\n    -r, --registry           specify third-party NPM registry\n    -u, --upgrade            overwrite package file\n    -x, --reject             exclude packages matching the given string, comma-\n                             delimited list, or regex\n    -V, --version            output the version number\n\nAdvanced Options\n--------------\n\nDo not use these unless you know what you are doing! Not needed for typical usage.\n\n    -e, --error-level        set the error-level. 1: exits with error code 0 if no\n                             errors occur. 2: exits with error code 0 if no\n                             packages need updating (useful for continuous\n                             integration)\n    -j, --jsonAll            output new package file instead of human-readable\n                             message\n    --jsonUpgraded           output upgraded dependencies in json\n    -l, --loglevel           what level of logs to report: silent, error, warn, \n                             info, verbose, silly (default: warn)\n    --packageData            include stringified package file (use stdin instead)\n    --packageFile            package file location (default: ./package.json)\n    --packageFileDir         use same directory as packageFile to compare against \n                             installed modules. See #201.\n    -n, --newest             find the newest published versions available instead \n                             of the latest stable versions\n    -o, --optional           check only optionalDependencies\n    -s, --silent             don't output anything (--loglevel silent)\n    --semverLevel            find the highest version within \"major\" or \"minor\"\n    -t, --greatest           find the highest versions available instead of the\n                             latest stable versions\n    -a, --upgradeAll         include even those dependencies whose latest\n                             version satisfies the declared semver dependency\n    --removeRange            remove version ranges from the final package version\n    --timeout                a global timeout in ms\n\nIntegration\n--------------\nThe tool allows integration with 3rd party code:\n\n```js\nconst ncu = require('npm-check-updates');\n\nncu.run({\n    // Always specify the path to the package file\n    packageFile: 'package.json',\n    // Any command-line option can be specified here.\n    // These are set by default:\n    silent: true,\n    jsonUpgraded: true\n}).then((upgraded) => {\n    console.log('dependencies to upgrade:', upgraded);\n});\n```\n\nHow dependency updates are determined\n--------------\n\n- Direct dependencies will be increased to the latest stable version:\n  - `2.0.1` → `2.2.0`\n  - `1.2` → `1.3`\n  - `0.1.0` → `1.0.1`\n  - with `--semverLevel major`\n    - `0.1.0` → `0.2.1`\n  - with `--semverLevel minor`\n    - `0.1.0` → `0.1.2`\n-  Semantic versioning policies for levels are maintained while satisfying the latest version:\n  - `^1.2.0` → `^2.0.0`\n  - `1.x` → `2.x`\n- \"Any version\" is maintained:\n  - `*` → `*`\n- \"Greater than\" is maintained:\n  - `>0.2.0` → `>0.3.0`\n- Closed ranges are replaced with a wildcard:\n  - `1.0.0 < 2.0.0` → `^3.0.0`\n\nWhy is it not updating ^1.0.0 to ^1.0.1 when 1.0.1 is the latest?\n--------------\n`^1.0.0` is a *range* that will includes all non-major updates. If you run `npm update`, it will install `1.0.1` without changing the dependency listed in your package file. You don't need to update your package file if the latest version is satisfied by the specified dependency range. If you *really* want to upgrade your package file (even though it's not necessary), you can run `ncu --upgradeAll`. \n\nDocker\n------\n\nDocker volumes can be used to easily update a package:\n\n```bash\ndocker run -it --rm -v $(pwd)/package.json:/app/package.json creack/ncu -u -a\n```\n\nKnown Issues\n--------------\n\n- `ncu -g` incorrectly report that all packages are up-to-date. This is due to an [issue in npm v3](npm/npm#9564) in which dead symlinks break `npm ls -g`. See [#235](https://github.com/tjunnone/npm-check-updates/issues/235#issuecomment-219314327) for a workaround (TLDR; Delete the dead symlinks). For others, it was an issue with the npm prefix path. Try `PREFIX=\"/usr/local/\" ncu -g` ([#146](https://github.com/tjunnone/npm-check-updates/issues/146#issuecomment-155758303)).\n\n- In some environments (Windows) npm-check-updates may hang. Run `ncu --loglevel verbose` to see if it is waiting for stdin. If so, try setting the package file explicitly: `ncu -g --packageFile package.json`. See [#136](https://github.com/tjunnone/npm-check-updates/issues/136#issuecomment-155721102).\n\n- There is an issue with [grunt-shell](https://github.com/sindresorhus/grunt-shell) described in [#119](https://github.com/tjunnone/npm-check-updates/issues/119). TLDR; You have to explicitly specify your package file with `ncu --packageFile package.json`. \n\n- `Cannot find module 'proto-list'`. This error is occurring for many people, yet it cannot be consistently reproduced. It seems to be fixed by fresh installs of node and npm: \"I reinstalled node 4.2.1 and npm 2.14.7. Installed ncu, and it worked fine. So I'm afraid I'm not able to reproduce the issue anymore.\" See [#144](https://github.com/tjunnone/npm-check-updates/issues/144#issuecomment-148499121).\n\nProblems?\n--------------\n\nPlease [file an issue](https://github.com/tjunnone/npm-check-updates/issues) on github!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tjunnone/npm-check-updates.git"
  },
  "scripts": {
    "lint": "eslint bin lib test",
    "test": "npm run lint ; mocha && mocha test/individual",
    "watch": "chokidar \"lib/**/*.js\" -c \"npm run test\""
  },
  "version": "2.11.3"
}
