{
  "_args": [
    [
      {
        "raw": "snyk-config@1.0.1",
        "scope": null,
        "escapedName": "snyk-config",
        "name": "snyk-config",
        "rawSpec": "1.0.1",
        "spec": "1.0.1",
        "type": "version"
      },
      "C:\\Users\\Adil\\Documents\\GitHub\\NG-1\\ng with ui-bootstrap\\node_modules\\snyk"
    ]
  ],
  "_from": "snyk-config@1.0.1",
  "_id": "snyk-config@1.0.1",
  "_inCache": true,
  "_location": "/snyk-config",
  "_nodeVersion": "4.2.1",
  "_npmUser": {
    "name": "snyk",
    "email": "admin+npm@snyk.io"
  },
  "_npmVersion": "2.14.8",
  "_phantomChildren": {},
  "_requested": {
    "raw": "snyk-config@1.0.1",
    "scope": null,
    "escapedName": "snyk-config",
    "name": "snyk-config",
    "rawSpec": "1.0.1",
    "spec": "1.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/snyk"
  ],
  "_resolved": "https://registry.npmjs.org/snyk-config/-/snyk-config-1.0.1.tgz",
  "_shasum": "f27aec2498b24027ac719214026521591111508f",
  "_shrinkwrap": null,
  "_spec": "snyk-config@1.0.1",
  "_where": "C:\\Users\\Adil\\Documents\\GitHub\\NG-1\\ng with ui-bootstrap\\node_modules\\snyk",
  "author": {
    "name": "Remy Sharp"
  },
  "bugs": {
    "url": "https://github.com/Snyk/config/issues"
  },
  "dependencies": {
    "debug": "^2.2.0",
    "nconf": "^0.7.2",
    "path-is-absolute": "^1.0.0"
  },
  "description": "Config setup for snyk shared across projects",
  "devDependencies": {
    "semantic-release": "^4.1.0",
    "tap-spec": "^2.2.2",
    "tape": "^4.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "f27aec2498b24027ac719214026521591111508f",
    "tarball": "https://registry.npmjs.org/snyk-config/-/snyk-config-1.0.1.tgz"
  },
  "gitHead": "7154068e8130dcc5311ecd480b1880829e68fb60",
  "homepage": "https://github.com/Snyk/config#readme",
  "keywords": [
    "config"
  ],
  "license": "Apache-2.0",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "snyk",
      "email": "admin+npm@snyk.io"
    }
  ],
  "name": "snyk-config",
  "optionalDependencies": {},
  "readme": "# snyk-config\n\nLoads the configuration for your module.\n\n## Usage\n\nAlthough you can require this module directly, it's recommended you create your own `config.js` file that can be cached by the require system and called *without* a path:\n\n```js\n// config.js\nmodule.exports = require('@snyk/config')('<directory with config files>');\n\n// in app.js\nvar config = require('./config');\n\n// in foo.js\nvar config = require('./config'); // matches config in app.js\n```\n\n## Method\n\nThe config loader will look for the following values in order of priority, specifically, if a property appears in multiple layers of config (below) the first found is used:\n\n- process environment values prefixed with `SNYN_`\n- process arguments\n- a `config.local.json` file in the root of your module\n- a `config.default.json` file in the root of your module\n\n## Example\n\n### config.local.json\n\n```json\n{\n  \"from\": \"file\"\n}\n```\n\n### app.js\n\n```js\n// as we're in the same directory as the config.local.json, there's no arg\nvar config = require('@snyk/config')();\nconsole.log(config);\n```\n\n### cli\n\n```shell\n$ SNYK_from=cli node app.js\n=> { from: \"cli\" }\n```\n\n## Notes\n\n* Values read from the environment or from the process arguments will *always* be strings. This is important to differentiate from values parsed in the config files as these can be `boolean` or `numbers`.\n* Environment property names strip *off* the preceding `SNYK_` string, so `SNYK_foo = 10` becomes `foo = \"10\"`\n* To create a nested object structure from the environment values, use two underscores: `SNYK__foo__bar = 10` becomes `foo = { bar: \"10\" }`",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Snyk/config.git"
  },
  "scripts": {
    "semantic-release": "semantic-release pre && npm publish && semantic-release post",
    "test": "node test/*.test.js --afoo --azoo='true' | tap-spec"
  },
  "version": "1.0.1"
}
